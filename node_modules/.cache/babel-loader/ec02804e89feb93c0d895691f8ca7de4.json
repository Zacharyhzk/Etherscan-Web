{"ast":null,"code":"// Copyright 2014 Andrei Karpushonak\n'use strict';\n\nvar ECMA_SIZES = require('./byte_size');\n\nvar Buffer = require('buffer/').Buffer;\n\nfunction allProperties(obj) {\n  var stringProperties = [];\n\n  for (var prop in obj) {\n    stringProperties.push(prop);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    var symbolProperties = Object.getOwnPropertySymbols(obj);\n    Array.prototype.push.apply(stringProperties, symbolProperties);\n  }\n\n  return stringProperties;\n}\n\nfunction sizeOfObject(seen, object) {\n  if (object == null) {\n    return 0;\n  }\n\n  var bytes = 0;\n  var properties = allProperties(object);\n\n  for (var i = 0; i < properties.length; i++) {\n    var key = properties[i]; // Do not recalculate circular references\n\n    if (typeof object[key] === 'object' && object[key] !== null) {\n      if (seen.has(object[key])) {\n        continue;\n      }\n\n      seen.add(object[key]);\n    }\n\n    bytes += getCalculator(seen)(key);\n\n    try {\n      bytes += getCalculator(seen)(object[key]);\n    } catch (ex) {\n      if (ex instanceof RangeError) {\n        // circular reference detected, final result might be incorrect\n        // let's be nice and not throw an exception\n        bytes = 0;\n      }\n    }\n  }\n\n  return bytes;\n}\n\nfunction getCalculator(seen) {\n  return function calculator(object) {\n    if (Buffer.isBuffer(object)) {\n      return object.length;\n    }\n\n    var objectType = typeof object;\n\n    switch (objectType) {\n      case 'string':\n        return object.length * ECMA_SIZES.STRING;\n\n      case 'boolean':\n        return ECMA_SIZES.BOOLEAN;\n\n      case 'number':\n        return ECMA_SIZES.NUMBER;\n\n      case 'symbol':\n        var isGlobalSymbol = Symbol.keyFor && Symbol.keyFor(object);\n        return isGlobalSymbol ? Symbol.keyFor(object).length * ECMA_SIZES.STRING : (object.toString().length - 8) * ECMA_SIZES.STRING;\n\n      case 'object':\n        if (Array.isArray(object)) {\n          return object.map(getCalculator(seen)).reduce(function (acc, curr) {\n            return acc + curr;\n          }, 0);\n        } else {\n          return sizeOfObject(seen, object);\n        }\n\n      default:\n        return 0;\n    }\n  };\n}\n/**\n * Main module's entry point\n * Calculates Bytes for the provided parameter\n * @param object - handles object/string/boolean/buffer\n * @returns {*}\n */\n\n\nfunction sizeof(object) {\n  return getCalculator(new WeakSet())(object);\n}\n\nmodule.exports = sizeof;","map":null,"metadata":{},"sourceType":"script"}