{"ast":null,"code":"import _objectSpread from \"/Users/huangzhongkai/Desktop/ntu msis/Semester 2/Blockchain System Software Engineering/FrontendAssessment/codes/Codes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport Web3 from 'web3';\nimport Big from 'big.js';\nimport { timeDiff } from './general_util';\nimport { infuraEndPoint, rinkebyEndPoint } from './web3_identity';\nexport var web3 = new Web3(new Web3.providers.HttpProvider(infuraEndPoint));\nexport var web3Rinkeby = new Web3(new Web3.providers.HttpProvider(rinkebyEndPoint)); // utility for creating a number range to loop over\n// TODO move to a general utility file\n\nexport var range = function range(start, end) {\n  var result = [];\n\n  for (var i = start; i <= end; i += 1) {\n    result.push(i);\n  }\n\n  return result;\n}; // https://ethereum.stackexchange.com/questions/1587/how-can-i-get-the-data-of-the-latest-10-blocks-via-web3-js\n\nexport var getNLatestBlocks = function getNLatestBlocks(n, processBlockCB) {\n  web3.eth.getBlockNumber().then(function (latestBlockNum) {\n    debugger;\n    var blockRange = range(latestBlockNum - n, latestBlockNum + 1);\n    var batch = new web3.BatchRequest();\n    var returnTransactionObjects = true;\n    blockRange.forEach(function (blockNum) {\n      batch.add(web3.eth.getBlock.request(blockNum, returnTransactionObjects, processBlockCB));\n    });\n    batch.execute();\n  });\n}; // AVG difficulty / AVG block time\n\nexport var networkHashRate = function networkHashRate(latestBlocks) {\n  if (!latestBlocks.length) return '';\n  var bigTotalDifficulty = new Big(0, 10);\n  var totalBlockTime = 0;\n  var total = latestBlocks.length;\n  latestBlocks.forEach(function (block, idx) {\n    var mineTime = idx === total - 1 ? 13 : timeDiff(latestBlocks[idx], latestBlocks[idx + 1]);\n    totalBlockTime += mineTime;\n    bigTotalDifficulty = bigTotalDifficulty.add(new Big(block.difficulty));\n  });\n  var avgBlockTime = totalBlockTime / total;\n  var bigAvgBlockTime = new Big(avgBlockTime, 0);\n  var avgDifficulty = bigTotalDifficulty.div(new Big(total, 0));\n  var bigNetworkHR = avgDifficulty.div(bigAvgBlockTime);\n  return bigNetworkHR.toString();\n}; // extracts txn objects from an incoming block\n// returns an object of txns with hash as keys, a\n// modified blocks with just txn hashes, and an array of txn hashes\n// @return { txnsObject, txnsHashArray, block}\n\nexport var extractTxnObjectsFromBlock = function extractTxnObjectsFromBlock(block) {\n  var transactions = block.transactions;\n\n  var newBlock = _objectSpread({}, block);\n\n  if (typeof transactions[0] === 'object' && transactions[0] !== null) {\n    var txnsObject = {};\n    var txnsHashArray = [];\n    transactions.forEach(function (txn) {\n      txnsHashArray.push(txn.hash);\n      txnsObject[txn.hash] = txn;\n    });\n    newBlock.transactions = [].concat(txnsHashArray); // also set reward while we have the block\n\n    var baseReward = new Big(newBlock.uncles.length * (2 / 32), 10).add(new Big(2, 10)).toString();\n    newBlock.reward = baseReward;\n    return {\n      txnsObject: txnsObject,\n      txnsHashArray: txnsHashArray,\n      block: newBlock\n    };\n  } // return something to key into to prevent undefined errors later\n\n\n  return {\n    txnsObject: {},\n    txnsHashArray: {},\n    block: block\n  };\n};\n\nvar calcGasUsed = function calcGasUsed(txObj) {\n  var gasUsed = txObj.gasUsed,\n      gasPrice = txObj.gasPrice;\n  var intGasUsed = parseInt(gasUsed, 10);\n  var intGasPrice = parseInt(gasPrice, 10);\n\n  var newTxObj = _objectSpread({}, txObj);\n\n  newTxObj.costOfGasUsed = intGasPrice * intGasUsed;\n  return newTxObj;\n};\n\nexport var mergeTxAndReciept = function mergeTxAndReciept(tx, reciept) {\n  if (tx.hash !== reciept.transactionHash) return tx;\n  return calcGasUsed(_objectSpread({}, tx, reciept));\n};\nexport var getTransactionReciept = function getTransactionReciept(txHash) {\n  return web3.eth.getTransactionReceipt(txHash);\n};\nexport var requestBatcher = function requestBatcher(args) {\n  var batch = new web3.BatchRequest();\n  args.forEach(function (req) {\n    return batch.add(req);\n  });\n  return batch.execute();\n};\nexport var calculateUpdatedRewad = function calculateUpdatedRewad(block, transaction) {\n  if (!block) return '2';\n  if (block.reward && !transaction) return block.reward;\n  var costEthe = web3.utils.fromWei(transaction.costOfGasUsed.toString(), 'ether');\n  var bigCost = new Big(costEthe, 10); // if for some reason block does not have reward assume its 2\n\n  var blockReward = block.reward ? block.reward : 2;\n  var bigReward = new Big(blockReward, 10).toString();\n  var newReward = bigCost.add(bigReward);\n  return newReward.toString();\n};","map":{"version":3,"sources":["/Users/huangzhongkai/Desktop/ntu msis/Semester 2/Blockchain System Software Engineering/FrontendAssessment/codes/Codes/src/util/web3_util.js"],"names":["Web3","Big","timeDiff","infuraEndPoint","rinkebyEndPoint","web3","providers","HttpProvider","web3Rinkeby","range","start","end","result","i","push","getNLatestBlocks","n","processBlockCB","eth","getBlockNumber","then","latestBlockNum","blockRange","batch","BatchRequest","returnTransactionObjects","forEach","blockNum","add","getBlock","request","execute","networkHashRate","latestBlocks","length","bigTotalDifficulty","totalBlockTime","total","block","idx","mineTime","difficulty","avgBlockTime","bigAvgBlockTime","avgDifficulty","div","bigNetworkHR","toString","extractTxnObjectsFromBlock","transactions","newBlock","txnsObject","txnsHashArray","txn","hash","baseReward","uncles","reward","calcGasUsed","txObj","gasUsed","gasPrice","intGasUsed","parseInt","intGasPrice","newTxObj","costOfGasUsed","mergeTxAndReciept","tx","reciept","transactionHash","getTransactionReciept","txHash","getTransactionReceipt","requestBatcher","args","req","calculateUpdatedRewad","transaction","costEthe","utils","fromWei","bigCost","blockReward","bigReward","newReward"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\nimport Big from 'big.js';\nimport { timeDiff } from './general_util';\nimport { infuraEndPoint, rinkebyEndPoint } from './web3_identity';\n\n\nexport const web3 = new Web3(new Web3.providers.HttpProvider(infuraEndPoint));\nexport const web3Rinkeby = new Web3(\n  new Web3.providers.HttpProvider(rinkebyEndPoint),\n);\n\n\n// utility for creating a number range to loop over\n// TODO move to a general utility file\nexport const range = (start, end) => {\n  const result = [];\n  for (let i = start; i <= end; i += 1) {\n    result.push(i);\n  }\n  return result;\n};\n\n// https://ethereum.stackexchange.com/questions/1587/how-can-i-get-the-data-of-the-latest-10-blocks-via-web3-js\nexport const getNLatestBlocks = (n, processBlockCB) => {\n  web3.eth.getBlockNumber().then((latestBlockNum) => {\n    debugger\n    const blockRange = range(latestBlockNum - n, latestBlockNum + 1);\n\n    const batch = new web3.BatchRequest();\n    const returnTransactionObjects = true;\n    blockRange.forEach((blockNum) => {\n      batch.add(web3.eth.getBlock.request(blockNum,\n        returnTransactionObjects,\n        processBlockCB));\n    });\n    batch.execute();\n  });\n};\n\n// AVG difficulty / AVG block time\nexport const networkHashRate = (latestBlocks) => {\n  if (!latestBlocks.length) return '';\n  let bigTotalDifficulty = new Big(0, 10);\n  let totalBlockTime = 0;\n  const total = latestBlocks.length;\n  latestBlocks.forEach((block, idx) => {\n    const mineTime = idx === total - 1 ? (13)\n      : (timeDiff(latestBlocks[idx], latestBlocks[idx + 1]));\n    totalBlockTime += mineTime;\n    bigTotalDifficulty = bigTotalDifficulty.add(new Big(block.difficulty));\n  });\n\n  const avgBlockTime = totalBlockTime / total;\n  const bigAvgBlockTime = new Big(avgBlockTime, 0);\n  const avgDifficulty = bigTotalDifficulty.div(new Big(total, 0));\n\n  const bigNetworkHR = avgDifficulty.div(bigAvgBlockTime);\n  return bigNetworkHR.toString();\n};\n\n// extracts txn objects from an incoming block\n// returns an object of txns with hash as keys, a\n// modified blocks with just txn hashes, and an array of txn hashes\n// @return { txnsObject, txnsHashArray, block}\nexport const extractTxnObjectsFromBlock = (block) => {\n  const { transactions } = block;\n  const newBlock = { ...block };\n\n  if ((typeof transactions[0] === 'object' && transactions[0] !== null)) {\n    const txnsObject = {};\n    const txnsHashArray = [];\n    transactions.forEach((txn) => {\n      txnsHashArray.push(txn.hash);\n      txnsObject[txn.hash] = txn;\n    });\n\n    newBlock.transactions = [...txnsHashArray];\n    // also set reward while we have the block\n    const baseReward = new Big(newBlock.uncles.length * (2 / 32), 10)\n      .add(new Big(2, 10))\n      .toString();\n    newBlock.reward = baseReward;\n\n    return { txnsObject, txnsHashArray, block: newBlock };\n  }\n  // return something to key into to prevent undefined errors later\n  return { txnsObject: {}, txnsHashArray: {}, block };\n};\n\nconst calcGasUsed = (txObj) => {\n  const { gasUsed, gasPrice } = txObj;\n  const intGasUsed = parseInt(gasUsed, 10);\n  const intGasPrice = parseInt(gasPrice, 10);\n  const newTxObj = { ...txObj };\n  newTxObj.costOfGasUsed = intGasPrice * intGasUsed;\n\n  return newTxObj;\n};\n\nexport const mergeTxAndReciept = (tx, reciept) => {\n  if (tx.hash !== reciept.transactionHash) return tx;\n  return calcGasUsed({ ...tx, ...reciept });\n};\n\nexport const getTransactionReciept = (txHash) => (\n  web3.eth.getTransactionReceipt(txHash)\n);\n\nexport const requestBatcher = (args) => {\n  const batch = new web3.BatchRequest();\n  args.forEach((req) => batch.add(req));\n  return batch.execute();\n};\n\nexport const calculateUpdatedRewad = (block, transaction) => {\n  if (!block) return '2';\n  if (block.reward && !transaction) return block.reward;\n  const costEthe = web3.utils.fromWei(\n    transaction.costOfGasUsed.toString(),\n    'ether',\n  );\n  const bigCost = new Big(costEthe, 10);\n\n  // if for some reason block does not have reward assume its 2\n  const blockReward = block.reward ? block.reward : 2;\n  const bigReward = new Big(blockReward, 10).toString();\n\n  const newReward = bigCost.add(bigReward);\n  return newReward.toString();\n}"]},"metadata":{},"sourceType":"module"}