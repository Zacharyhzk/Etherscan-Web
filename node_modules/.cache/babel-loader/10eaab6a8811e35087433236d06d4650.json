{"ast":null,"code":"import * as Web3Util from '../util/web3_util';\nimport { calculateUpdatedRewad } from '../util/web3_util';\nexport var RECEIVE_BLOCK = 'RECEIVE_BLOCK';\nexport var RECEIVE_TRANSACTION_RECEIPT = 'RECEIVE_TRANSACTION_RECEIPT';\nexport var UPDATE_BLOCK_REWARD = 'UPDATE_BLOCK_REWARD';\n\nvar receiveTransactionReciept = function receiveTransactionReciept(txReceipt) {\n  return {\n    type: RECEIVE_TRANSACTION_RECEIPT,\n    txReceipt: txReceipt\n  };\n};\n\nexport var updateBlockReward = function updateBlockReward(blockHash, reward) {\n  return {\n    type: UPDATE_BLOCK_REWARD,\n    blockHash: blockHash,\n    reward: reward\n  };\n};\nexport var receiveBlock = function receiveBlock(blk, fetchTxRecieptDispatch) {\n  var _Web3Util$extractTxnO = Web3Util.extractTxnObjectsFromBlock(blk),\n      txnsObject = _Web3Util$extractTxnO.txnsObject,\n      txnsHashArray = _Web3Util$extractTxnO.txnsHashArray,\n      block = _Web3Util$extractTxnO.block;\n\n  if (txnsHashArray) {\n    txnsHashArray.forEach(function (txHash) {\n      fetchTxRecieptDispatch(txHash);\n    });\n  }\n\n  return {\n    type: RECEIVE_BLOCK,\n    block: block,\n    txnsObject: txnsObject,\n    txnsHashArray: txnsHashArray\n  };\n};\nexport var fetchTransactionReciept = function fetchTransactionReciept(dispatch, getState) {\n  return function (txHash) {\n    return Web3Util.getTransactionReciept(txHash).then(function (txReceipt) {\n      if (!txReceipt) {\n        return;\n      }\n\n      dispatch(receiveTransactionReciept(txReceipt));\n      var blockHash = txReceipt.blockHash,\n          transactionHash = txReceipt.transactionHash;\n      var _getState$entities = getState().entities,\n          blocks = _getState$entities.blocks,\n          transactions = _getState$entities.transactions;\n      var block = blocks[blockHash];\n      var transaction = transactions[transactionHash];\n      var reward = calculateUpdatedRewad(block, transaction);\n      dispatch(updateBlockReward(block.hash, reward));\n    });\n  };\n}; // batch.execute for request return err and block\n// callback for batched block requests\n\nvar processBlock = function processBlock(dispatch, getState) {\n  return function (err, block) {\n    var fetchTxRecieptDispatch = fetchTransactionReciept(dispatch, getState);\n\n    if (!err) {\n      // make sure we don't already have block to prevent redudant down stream\n      // actions\n      var blocks = getState().entities.blocks;\n      if (blocks[block.hash] !== undefined) return;\n      dispatch(receiveBlock(block, fetchTxRecieptDispatch));\n    } else {// console.error('Custom ERROR: Block reciept ERROR: ', err);\n    }\n  };\n}; // Takes in the quantity of blocks to fetch\n\n\nexport var fetchBlocks = function fetchBlocks(quantity) {\n  return function (dispatch, getStore) {\n    var processBlockDispatch = processBlock(dispatch, getStore);\n    Web3Util.getNLatestBlocks(quantity, processBlockDispatch);\n  };\n};","map":{"version":3,"sources":["/Users/huangzhongkai/Desktop/ntu msis/Semester 2/Blockchain System Software Engineering/FrontendAssessment/codes/Codes/src/actions/web3_actions.js"],"names":["Web3Util","calculateUpdatedRewad","RECEIVE_BLOCK","RECEIVE_TRANSACTION_RECEIPT","UPDATE_BLOCK_REWARD","receiveTransactionReciept","txReceipt","type","updateBlockReward","blockHash","reward","receiveBlock","blk","fetchTxRecieptDispatch","extractTxnObjectsFromBlock","txnsObject","txnsHashArray","block","forEach","txHash","fetchTransactionReciept","dispatch","getState","getTransactionReciept","then","transactionHash","entities","blocks","transactions","transaction","hash","processBlock","err","undefined","fetchBlocks","quantity","getStore","processBlockDispatch","getNLatestBlocks"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,mBAA1B;AACA,SAASC,qBAAT,QAAsC,mBAAtC;AAEA,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,2BAA2B,GAAG,6BAApC;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;;AAEP,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,SAAD;AAAA,SAAgB;AAChDC,IAAAA,IAAI,EAAEJ,2BAD0C;AAEhDG,IAAAA,SAAS,EAATA;AAFgD,GAAhB;AAAA,CAAlC;;AAKA,OAAO,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,SAAD,EAAYC,MAAZ;AAAA,SAAwB;AACvDH,IAAAA,IAAI,EAAEH,mBADiD;AAEvDK,IAAAA,SAAS,EAATA,SAFuD;AAGvDC,IAAAA,MAAM,EAANA;AAHuD,GAAxB;AAAA,CAA1B;AAMP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAMC,sBAAN,EAAiC;AAAA,8BAKvDb,QAAQ,CAACc,0BAAT,CAAoCF,GAApC,CALuD;AAAA,MAEzDG,UAFyD,yBAEzDA,UAFyD;AAAA,MAGzDC,aAHyD,yBAGzDA,aAHyD;AAAA,MAIzDC,KAJyD,yBAIzDA,KAJyD;;AAQ3D,MAAID,aAAJ,EAAmB;AACjBA,IAAAA,aAAa,CAACE,OAAd,CAAsB,UAACC,MAAD,EAAY;AAChCN,MAAAA,sBAAsB,CAACM,MAAD,CAAtB;AACD,KAFD;AAGD;;AAED,SAAO;AACLZ,IAAAA,IAAI,EAAEL,aADD;AAELe,IAAAA,KAAK,EAALA,KAFK;AAGLF,IAAAA,UAAU,EAAVA,UAHK;AAILC,IAAAA,aAAa,EAAbA;AAJK,GAAP;AAMD,CApBM;AAsBP,OAAO,IAAMI,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,QAAD,EAAWC,QAAX;AAAA,SAAwB,UAACH,MAAD;AAAA,WAC7DnB,QAAQ,CAACuB,qBAAT,CAA+BJ,MAA/B,EACGK,IADH,CACQ,UAAClB,SAAD,EAAe;AACnB,UAAI,CAACA,SAAL,EAAgB;AACd;AACD;;AAEDe,MAAAA,QAAQ,CAAChB,yBAAyB,CAACC,SAAD,CAA1B,CAAR;AALmB,UAOXG,SAPW,GAOoBH,SAPpB,CAOXG,SAPW;AAAA,UAOAgB,eAPA,GAOoBnB,SAPpB,CAOAmB,eAPA;AAAA,+BAQcH,QAAQ,GAAGI,QARzB;AAAA,UAQXC,MARW,sBAQXA,MARW;AAAA,UAQHC,YARG,sBAQHA,YARG;AASnB,UAAMX,KAAK,GAAGU,MAAM,CAAClB,SAAD,CAApB;AACA,UAAMoB,WAAW,GAAGD,YAAY,CAACH,eAAD,CAAhC;AACA,UAAMf,MAAM,GAAGT,qBAAqB,CAACgB,KAAD,EAAQY,WAAR,CAApC;AAEAR,MAAAA,QAAQ,CAACb,iBAAiB,CAACS,KAAK,CAACa,IAAP,EAAapB,MAAb,CAAlB,CAAR;AACD,KAfH,CAD6D;AAAA,GAAxB;AAAA,CAAhC,C,CAmBP;AACA;;AACA,IAAMqB,YAAY,GAAG,SAAfA,YAAe,CAACV,QAAD,EAAWC,QAAX;AAAA,SAAwB,UAACU,GAAD,EAAMf,KAAN,EAAgB;AAC3D,QAAMJ,sBAAsB,GAAGO,uBAAuB,CAACC,QAAD,EAAWC,QAAX,CAAtD;;AACA,QAAI,CAACU,GAAL,EAAU;AACR;AACA;AAFQ,UAGAL,MAHA,GAGWL,QAAQ,GAAGI,QAHtB,CAGAC,MAHA;AAIR,UAAIA,MAAM,CAACV,KAAK,CAACa,IAAP,CAAN,KAAuBG,SAA3B,EAAsC;AACtCZ,MAAAA,QAAQ,CAACV,YAAY,CAACM,KAAD,EAAQJ,sBAAR,CAAb,CAAR;AACD,KAND,MAMO,CACL;AACD;AACF,GAXoB;AAAA,CAArB,C,CAaA;;;AACA,OAAO,IAAMqB,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAAc,UAACd,QAAD,EAAWe,QAAX,EAAwB;AAC/D,QAAMC,oBAAoB,GAAGN,YAAY,CAACV,QAAD,EAAWe,QAAX,CAAzC;AACApC,IAAAA,QAAQ,CAACsC,gBAAT,CAA0BH,QAA1B,EAAoCE,oBAApC;AACD,GAH0B;AAAA,CAApB","sourcesContent":["import * as Web3Util from '../util/web3_util';\nimport { calculateUpdatedRewad } from '../util/web3_util';\n\nexport const RECEIVE_BLOCK = 'RECEIVE_BLOCK';\nexport const RECEIVE_TRANSACTION_RECEIPT = 'RECEIVE_TRANSACTION_RECEIPT';\nexport const UPDATE_BLOCK_REWARD = 'UPDATE_BLOCK_REWARD';\n\nconst receiveTransactionReciept = (txReceipt) => ({\n  type: RECEIVE_TRANSACTION_RECEIPT,\n  txReceipt,\n});\n\nexport const updateBlockReward = (blockHash, reward) => ({\n  type: UPDATE_BLOCK_REWARD,\n  blockHash,\n  reward,\n});\n\nexport const receiveBlock = (blk, fetchTxRecieptDispatch) => {\n  const {\n    txnsObject,\n    txnsHashArray,\n    block,\n  } = Web3Util.extractTxnObjectsFromBlock(blk);\n\n\n  if (txnsHashArray) {\n    txnsHashArray.forEach((txHash) => {\n      fetchTxRecieptDispatch(txHash);\n    });\n  }\n\n  return {\n    type: RECEIVE_BLOCK,\n    block,\n    txnsObject,\n    txnsHashArray,\n  };\n};\n\nexport const fetchTransactionReciept = (dispatch, getState) => (txHash) => (\n  Web3Util.getTransactionReciept(txHash)\n    .then((txReceipt) => {\n      if (!txReceipt) {\n        return;\n      }\n\n      dispatch(receiveTransactionReciept(txReceipt));\n\n      const { blockHash, transactionHash } = txReceipt;\n      const { blocks, transactions } = getState().entities;\n      const block = blocks[blockHash];\n      const transaction = transactions[transactionHash];\n      const reward = calculateUpdatedRewad(block, transaction);\n\n      dispatch(updateBlockReward(block.hash, reward));\n    })\n);\n\n// batch.execute for request return err and block\n// callback for batched block requests\nconst processBlock = (dispatch, getState) => (err, block) => {\n  const fetchTxRecieptDispatch = fetchTransactionReciept(dispatch, getState);\n  if (!err) {\n    // make sure we don't already have block to prevent redudant down stream\n    // actions\n    const { blocks } = getState().entities;\n    if (blocks[block.hash] !== undefined) return;\n    dispatch(receiveBlock(block, fetchTxRecieptDispatch));\n  } else {\n    // console.error('Custom ERROR: Block reciept ERROR: ', err);\n  }\n};\n\n// Takes in the quantity of blocks to fetch\nexport const fetchBlocks = (quantity) => (dispatch, getStore) => {\n  const processBlockDispatch = processBlock(dispatch, getStore);\n  Web3Util.getNLatestBlocks(quantity, processBlockDispatch);\n};\n"]},"metadata":{},"sourceType":"module"}