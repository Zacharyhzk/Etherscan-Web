{"ast":null,"code":"import _classCallCheck from \"/Users/huangzhongkai/Desktop/ntu msis/Semester 2/Blockchain System Software Engineering/FrontendAssessment/codes/Codes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/huangzhongkai/Desktop/ntu msis/Semester 2/Blockchain System Software Engineering/FrontendAssessment/codes/Codes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/huangzhongkai/Desktop/ntu msis/Semester 2/Blockchain System Software Engineering/FrontendAssessment/codes/Codes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/huangzhongkai/Desktop/ntu msis/Semester 2/Blockchain System Software Engineering/FrontendAssessment/codes/Codes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/huangzhongkai/Desktop/ntu msis/Semester 2/Blockchain System Software Engineering/FrontendAssessment/codes/Codes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/huangzhongkai/Desktop/ntu msis/Semester 2/Blockchain System Software Engineering/FrontendAssessment/codes/Codes/src/components/RunWeb3Container.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchBlocks as _fetchBlocks } from '../actions/web3_actions';\nimport { fetchAddressTypeTags as _fetchAddressTypeTags } from '../actions/address_actions';\n\nvar RunWeb3 =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(RunWeb3, _React$Component);\n\n  function RunWeb3(props) {\n    var _this;\n\n    _classCallCheck(this, RunWeb3);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RunWeb3).call(this, props));\n    _this.state = {\n      intervalID: 0\n    };\n    return _this;\n  }\n\n  _createClass(RunWeb3, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.props.fetchAddressTypeTags();\n      this.props.fetchBlocks(8); // TODO production always comment in\n\n      this.state.intervalID = setInterval(function () {\n        _this2.props.fetchBlocks(1);\n      }, 3 * 1000); // stop fetches after 12 minutes so state does not get to bloated\n      // TODO come up with solution to clear state\n\n      setTimeout(function () {\n        clearInterval(_this2.state.intervalID);\n      }, 12 * 60 * 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // take down interval Fetch if it hasnt been taken down already\n      clearInterval(this.state.intervalID);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"run-web3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return RunWeb3;\n}(React.Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchBlocks: function fetchBlocks(quantity) {\n      return dispatch(_fetchBlocks(quantity));\n    },\n    fetchAddressTypeTags: function fetchAddressTypeTags() {\n      return dispatch(_fetchAddressTypeTags());\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(RunWeb3);","map":{"version":3,"sources":["/Users/huangzhongkai/Desktop/ntu msis/Semester 2/Blockchain System Software Engineering/FrontendAssessment/codes/Codes/src/components/RunWeb3Container.jsx"],"names":["React","connect","fetchBlocks","fetchAddressTypeTags","RunWeb3","props","state","intervalID","setInterval","setTimeout","clearInterval","Component","mapDispatchToProps","dispatch","quantity"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,WAAW,IAAXA,YAAT,QAA4B,yBAA5B;AACA,SAASC,oBAAoB,IAApBA,qBAAT,QAAqC,4BAArC;;IACMC,O;;;;;AAEJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,iFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE;AADD,KAAb;AAFiB;AAKlB;;;;wCAEmB;AAAA;;AAClB,WAAKF,KAAL,CAAWF,oBAAX;AACA,WAAKE,KAAL,CAAWH,WAAX,CAAuB,CAAvB,EAFkB,CAIlB;;AACA,WAAKI,KAAL,CAAWC,UAAX,GAAwBC,WAAW,CAAC,YAAM;AACxC,QAAA,MAAI,CAACH,KAAL,CAAWH,WAAX,CAAuB,CAAvB;AACD,OAFkC,EAEhC,IAAI,IAF4B,CAAnC,CALkB,CASlB;AACA;;AACAO,MAAAA,UAAU,CAAC,YAAM;AACfC,QAAAA,aAAa,CAAC,MAAI,CAACJ,KAAL,CAAWC,UAAZ,CAAb;AACD,OAFS,EAEP,KAAK,EAAL,GAAU,IAFH,CAAV;AAGD;;;2CAEsB;AACrB;AACAG,MAAAA,aAAa,CAAC,KAAKJ,KAAL,CAAWC,UAAZ,CAAb;AACD;;;6BAEQ;AACP,aACE;AAAK,QAAA,EAAE,EAAC,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAKD;;;;EApCmBP,KAAK,CAACW,S;;AAuC5B,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD;AAAA,SAAe;AACxCX,IAAAA,WAAW,EAAE,qBAACY,QAAD;AAAA,aAAcD,QAAQ,CAACX,YAAW,CAACY,QAAD,CAAZ,CAAtB;AAAA,KAD2B;AAExCX,IAAAA,oBAAoB,EAAE;AAAA,aAAMU,QAAQ,CAACV,qBAAoB,EAArB,CAAd;AAAA;AAFkB,GAAf;AAAA,CAA3B;;AAKA,eAAeF,OAAO,CAAC,IAAD,EAAOW,kBAAP,CAAP,CAAkCR,OAAlC,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { fetchBlocks } from '../actions/web3_actions'\nimport { fetchAddressTypeTags } from '../actions/address_actions'\nclass RunWeb3 extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      intervalID: 0,\n    }\n  }\n\n  componentDidMount() {\n    this.props.fetchAddressTypeTags();\n    this.props.fetchBlocks(8)\n\n    // TODO production always comment in\n    this.state.intervalID = setInterval(() => {\n      this.props.fetchBlocks(1)\n    }, 3 * 1000)\n\n    // stop fetches after 12 minutes so state does not get to bloated\n    // TODO come up with solution to clear state\n    setTimeout(() => {\n      clearInterval(this.state.intervalID)\n    }, 12 * 60 * 1000)\n  }\n\n  componentWillUnmount() {\n    // take down interval Fetch if it hasnt been taken down already\n    clearInterval(this.state.intervalID)\n  }\n\n  render() {\n    return (\n      <div id='run-web3'>\n\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchBlocks: (quantity) => dispatch(fetchBlocks(quantity)),\n  fetchAddressTypeTags: () => dispatch(fetchAddressTypeTags())\n})\n\nexport default connect(null, mapDispatchToProps)(RunWeb3);\n\n"]},"metadata":{},"sourceType":"module"}