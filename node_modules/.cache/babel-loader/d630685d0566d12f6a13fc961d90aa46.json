{"ast":null,"code":"import _defineProperty from \"/Users/huangzhongkai/Desktop/ntu msis/Semester 2/Blockchain System Software Engineering/FrontendAssessment/Etherscan-Web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/huangzhongkai/Desktop/ntu msis/Semester 2/Blockchain System Software Engineering/FrontendAssessment/Etherscan-Web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { RECEIVE_BLOCK, RECEIVE_TRANSACTION_RECEIPT } from '../actions/web3_actions';\nimport { mergeTxAndReciept } from '../util/web3_util';\n\nvar createNewStateWithTxReciept = function createNewStateWithTxReciept(state, txReceipt) {\n  var transactionHash = txReceipt.transactionHash;\n  var mergedTx = mergeTxAndReciept(state[transactionHash], txReceipt);\n\n  var newState = _objectSpread({}, state, _defineProperty({}, transactionHash, mergedTx));\n\n  return newState;\n};\n\nvar transactionsReducer = function transactionsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  Object.freeze(state);\n\n  switch (action.type) {\n    case RECEIVE_BLOCK:\n      // check if the first transaction from block already exist\n      if (state[Object.keys(action.txnsObject)[0]] !== undefined) return state;\n      return _objectSpread({}, state, action.txnsObject);\n\n    case RECEIVE_TRANSACTION_RECEIPT:\n      // check if original tx exist before trying to merge reciept\n      return state[action.txReceipt.transactionHash] !== undefined ? createNewStateWithTxReciept(state, action.txReceipt) : state;\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nexport default transactionsReducer;","map":{"version":3,"sources":["/Users/huangzhongkai/Desktop/ntu msis/Semester 2/Blockchain System Software Engineering/FrontendAssessment/Etherscan-Web/src/reducers/transactions_reducer.js"],"names":["RECEIVE_BLOCK","RECEIVE_TRANSACTION_RECEIPT","mergeTxAndReciept","createNewStateWithTxReciept","state","txReceipt","transactionHash","mergedTx","newState","transactionsReducer","action","Object","freeze","type","keys","txnsObject","undefined"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,2BAAxB,QAA2D,yBAA3D;AACA,SAASC,iBAAT,QAAkC,mBAAlC;;AAEA,IAAMC,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACC,KAAD,EAAQC,SAAR,EAAsB;AAAA,MAChDC,eADgD,GAC5BD,SAD4B,CAChDC,eADgD;AAExD,MAAMC,QAAQ,GAAGL,iBAAiB,CAACE,KAAK,CAACE,eAAD,CAAN,EAAyBD,SAAzB,CAAlC;;AACA,MAAMG,QAAQ,qBAAQJ,KAAR,sBAAgBE,eAAhB,EAAkCC,QAAlC,EAAd;;AACA,SAAOC,QAAP;AACD,CALD;;AAOA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAwB;AAAA,MAAvBL,KAAuB,uEAAf,EAAe;AAAA,MAAXM,MAAW;AAClDC,EAAAA,MAAM,CAACC,MAAP,CAAcR,KAAd;;AACA,UAAQM,MAAM,CAACG,IAAf;AACE,SAAKb,aAAL;AACE;AACA,UAAII,KAAK,CAACO,MAAM,CAACG,IAAP,CAAYJ,MAAM,CAACK,UAAnB,EAA+B,CAA/B,CAAD,CAAL,KAA6CC,SAAjD,EAA4D,OAAOZ,KAAP;AAC5D,+BAAYA,KAAZ,EAAsBM,MAAM,CAACK,UAA7B;;AACF,SAAKd,2BAAL;AACE;AACA,aAAQG,KAAK,CAACM,MAAM,CAACL,SAAP,CAAiBC,eAAlB,CAAL,KAA4CU,SAA7C,GACLb,2BAA2B,CAACC,KAAD,EAAQM,MAAM,CAACL,SAAf,CADtB,GAEFD,KAFL;;AAGF;AACE,aAAOA,KAAP;AAXJ;;AAYC;AACF,CAfD;;AAiBA,eAAeK,mBAAf","sourcesContent":["import { RECEIVE_BLOCK, RECEIVE_TRANSACTION_RECEIPT } from '../actions/web3_actions';\nimport { mergeTxAndReciept } from '../util/web3_util';\n\nconst createNewStateWithTxReciept = (state, txReceipt) => {\n  const { transactionHash } = txReceipt;\n  const mergedTx = mergeTxAndReciept(state[transactionHash], txReceipt);\n  const newState = { ...state, [transactionHash]: mergedTx };\n  return newState;\n};\n\nconst transactionsReducer = (state = {}, action) => {\n  Object.freeze(state);\n  switch (action.type) {\n    case RECEIVE_BLOCK:\n      // check if the first transaction from block already exist\n      if (state[Object.keys(action.txnsObject)[0]] !== undefined) return state;\n      return { ...state, ...action.txnsObject };\n    case RECEIVE_TRANSACTION_RECEIPT:\n      // check if original tx exist before trying to merge reciept\n      return (state[action.txReceipt.transactionHash] !== undefined) ? (\n        createNewStateWithTxReciept(state, action.txReceipt)\n      ) : (state);\n    default:\n      return state;\n  };\n};\n\nexport default transactionsReducer;"]},"metadata":{},"sourceType":"module"}