{"ast":null,"code":"import _defineProperty from \"/Users/huangzhongkai/Desktop/ntu msis/Semester 2/Blockchain System Software Engineering/FrontendAssessment/Etherscan-Web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/huangzhongkai/Desktop/ntu msis/Semester 2/Blockchain System Software Engineering/FrontendAssessment/Etherscan-Web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { RECEIVE_BLOCK, UPDATE_BLOCK_REWARD } from '../actions/web3_actions';\n\nvar updateBlockRewardInState = function updateBlockRewardInState(_ref, state) {\n  var blockHash = _ref.blockHash,\n      reward = _ref.reward;\n\n  var newState = _objectSpread({}, state);\n\n  newState[blockHash].reward = reward;\n  return newState;\n};\n\nvar blocksReducer = function blocksReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  Object.freeze(state);\n\n  switch (action.type) {\n    case RECEIVE_BLOCK:\n      // check if block already exists\n      if (state[action.block.hash] !== undefined) return state;\n      return _objectSpread({}, state, _defineProperty({}, action.block.hash, action.block));\n\n    case UPDATE_BLOCK_REWARD:\n      return updateBlockRewardInState(action, state);\n\n    default:\n      return state;\n  }\n};\n\nexport default blocksReducer;","map":{"version":3,"sources":["/Users/huangzhongkai/Desktop/ntu msis/Semester 2/Blockchain System Software Engineering/FrontendAssessment/Etherscan-Web/src/reducers/blocks_reducer.js"],"names":["RECEIVE_BLOCK","UPDATE_BLOCK_REWARD","updateBlockRewardInState","state","blockHash","reward","newState","blocksReducer","action","Object","freeze","type","block","hash","undefined"],"mappings":";;AAAA,SACEA,aADF,EAEEC,mBAFF,QAGO,yBAHP;;AAKA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,OAAwBC,KAAxB,EAAkC;AAAA,MAA/BC,SAA+B,QAA/BA,SAA+B;AAAA,MAApBC,MAAoB,QAApBA,MAAoB;;AACjE,MAAMC,QAAQ,qBAAQH,KAAR,CAAd;;AACAG,EAAAA,QAAQ,CAACF,SAAD,CAAR,CAAoBC,MAApB,GAA6BA,MAA7B;AACA,SAAOC,QAAP;AACD,CAJD;;AAMA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAwB;AAAA,MAAvBJ,KAAuB,uEAAf,EAAe;AAAA,MAAXK,MAAW;AAC5CC,EAAAA,MAAM,CAACC,MAAP,CAAcP,KAAd;;AACA,UAAQK,MAAM,CAACG,IAAf;AACE,SAAKX,aAAL;AACE;AACA,UAAIG,KAAK,CAACK,MAAM,CAACI,KAAP,CAAaC,IAAd,CAAL,KAA6BC,SAAjC,EAA4C,OAAOX,KAAP;AAC5C,+BAAYA,KAAZ,sBAAoBK,MAAM,CAACI,KAAP,CAAaC,IAAjC,EAAwCL,MAAM,CAACI,KAA/C;;AACF,SAAKX,mBAAL;AACE,aAAOC,wBAAwB,CAACM,MAAD,EAASL,KAAT,CAA/B;;AACF;AACE,aAAOA,KAAP;AARJ;AAUD,CAZD;;AAcA,eAAeI,aAAf","sourcesContent":["import {\n  RECEIVE_BLOCK,\n  UPDATE_BLOCK_REWARD,\n} from '../actions/web3_actions';\n\nconst updateBlockRewardInState = ({ blockHash, reward }, state) => {\n  const newState = { ...state };\n  newState[blockHash].reward = reward;\n  return newState;\n};\n\nconst blocksReducer = (state = {}, action) => {\n  Object.freeze(state);\n  switch (action.type) {\n    case RECEIVE_BLOCK:\n      // check if block already exists\n      if (state[action.block.hash] !== undefined) return state;\n      return { ...state, [action.block.hash]: action.block };\n    case UPDATE_BLOCK_REWARD:\n      return updateBlockRewardInState(action, state);\n    default:\n      return state;\n  }\n};\n\nexport default blocksReducer;\n"]},"metadata":{},"sourceType":"module"}